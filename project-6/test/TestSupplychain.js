// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 2
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = 3
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Harvested()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        console.log("upc=", upc)
        console.log("Harvested originFarmerID=", originFarmerID)
        console.log(" resultBufferOne[0]=", resultBufferOne[0].toNumber())
        console.log(" resultBufferOne[1]=", resultBufferOne[1].toNumber())
        console.log(" resultBufferOne[2]=", resultBufferOne[2])
        console.log(" resultBufferOne[3]=", resultBufferOne[3])
        console.log(" resultBufferOne[4]=", resultBufferOne[4])
        console.log(" resultBufferOne[5]=", resultBufferOne[5])
        console.log(" resultBufferOne[6]=", resultBufferOne[6])
        console.log(" resultBufferOne[7]=", resultBufferOne[7])
        console.log(" resultBufferTwo[0]=", resultBufferTwo[0].toNumber())
        console.log(" resultBufferTwo[1]=", resultBufferTwo[1].toNumber())
        console.log(" resultBufferTwo[2]=", resultBufferTwo[2].toNumber())
        console.log(" resultBufferTwo[3]=", resultBufferTwo[3])
        console.log(" resultBufferTwo[4]=", resultBufferTwo[4].toNumber())
        console.log(" resultBufferTwo[5]=", resultBufferTwo[5].toNumber())
        console.log(" resultBufferTwo[6]=", resultBufferTwo[6])
        console.log(" resultBufferTwo[7]=", resultBufferTwo[7])
        console.log(" resultBufferTwo[8]=", resultBufferTwo[8])
        // Verify the result set
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1].toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.notEqual(resultBufferTwo[4].toNumber(), productPrice, 'Error: Missing or Invalid product price')
        assert.equal(resultBufferTwo[5].toNumber(), itemState, 'Error: Missing or Invalid itemState')
        assert.notEqual(resultBufferTwo[6], accounts[2], 'Error: Invalid distributionID')
        assert.notEqual(resultBufferTwo[7], accounts[3], 'Error: Invalid retailID')
        assert.notEqual(resultBufferTwo[8], accounts[4], 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        var event = supplyChain.Processed()
        await event.watch((err, res) => {
            eventEmitted = true
            //console.log("Emitted event Processed")
        })       

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc)


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        console.log("Processed upc=", upc, " productID=", productID, " productNotes=", productNotes, " productPrice=", productPrice, " itemState=", itemState)
        console.log(" resultBufferTwo[0]=", resultBufferTwo[0].toNumber())
        console.log(" resultBufferTwo[1]=", resultBufferTwo[1].toNumber())
        console.log(" resultBufferTwo[2]=", resultBufferTwo[2].toNumber())
        console.log(" resultBufferTwo[3]=", resultBufferTwo[3])
        console.log(" resultBufferTwo[4]=", resultBufferTwo[4].toNumber())
        console.log(" resultBufferTwo[5]=", resultBufferTwo[5].toNumber())
        console.log(" resultBufferTwo[6]=", resultBufferTwo[6])
        console.log(" resultBufferTwo[7]=", resultBufferTwo[7])
        console.log(" resultBufferTwo[8]=", resultBufferTwo[8])
        // Verify the result set
        itemState = itemState + 1
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1].toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.notEqual(resultBufferTwo[4].toNumber(), productPrice, 'Error: Missing or Invalid product price')
        assert.equal(resultBufferTwo[5].toNumber(), itemState, 'Error: Missing or Invalid itemState')
        assert.notEqual(resultBufferTwo[6], accounts[2], 'Error: Invalid distributionID')
        assert.notEqual(resultBufferTwo[7], accounts[3], 'Error: Invalid retailID')
        assert.notEqual(resultBufferTwo[8], accounts[4], 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')             
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false

        
        // Watch the emitted event Packed()
        var event = supplyChain.Packed()
        await event.watch((err, res) => {
            eventEmitted = true
        })            

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        console.log("Processed upc=", upc, " productID=", productID, " productNotes=", productNotes, " productPrice=", productPrice, " itemState=", itemState)
        console.log(" resultBufferTwo[0]=", resultBufferTwo[0].toNumber())
        console.log(" resultBufferTwo[1]=", resultBufferTwo[1].toNumber())
        console.log(" resultBufferTwo[2]=", resultBufferTwo[2].toNumber())
        console.log(" resultBufferTwo[3]=", resultBufferTwo[3])
        console.log(" resultBufferTwo[4]=", resultBufferTwo[4].toNumber())
        console.log(" resultBufferTwo[5]=", resultBufferTwo[5].toNumber())
        console.log(" resultBufferTwo[6]=", resultBufferTwo[6])
        console.log(" resultBufferTwo[7]=", resultBufferTwo[7])
        console.log(" resultBufferTwo[8]=", resultBufferTwo[8])

        // Verify the result set
        itemState = itemState + 1
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1].toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.notEqual(resultBufferTwo[4].toNumber(), productPrice, 'Error: Missing or Invalid product price')
        assert.equal(resultBufferTwo[5].toNumber(), itemState, 'Error: Missing or Invalid itemState')
        assert.notEqual(resultBufferTwo[6], accounts[2], 'Error: Invalid distributionID')
        assert.notEqual(resultBufferTwo[7], accounts[3], 'Error: Invalid retailID')
        assert.notEqual(resultBufferTwo[8], accounts[4], 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')         
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
  
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })         

        // Mark an item as ForSale by calling function sellItem()
        console.log("sellItem() upc=", upc, " productPrice=", productPrice)
        await supplyChain.sellItem(upc, productPrice)
       

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
       

        // Verify the result set
        itemState = itemState + 1
        console.log("sellItem() upc=", upc, " resultBufferTwo[4].toNumber()=", resultBufferTwo[4].toNumber())
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1].toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4].toNumber(), productPrice, 'Error: Missing or Invalid product price')
        assert.equal(resultBufferTwo[5].toNumber(), itemState, 'Error: Missing or Invalid itemState')
        assert.notEqual(resultBufferTwo[6], accounts[2], 'Error: Invalid distributionID')
        assert.notEqual(resultBufferTwo[7], accounts[3], 'Error: Invalid retailID')
        assert.notEqual(resultBufferTwo[8], accounts[4], 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')         
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        const resultBufferTwoa = await supplyChain.fetchItemBufferTwo.call(upc)
        console.log("sellItem() upc=", resultBufferTwoa[1].toNumber(), " resultBufferTwoa[4].toNumber()=", resultBufferTwoa[4].toNumber())

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })         

        // Mark an item as Sold by calling function buyItem()
        let balance = await web3.eth.getBalance(accounts[0])
        console.log("upc=", upc)
        console.log("Account Contractor accounts[0]=",accounts[0]," balance=", balance.toNumber())
        balance = await web3.eth.getBalance(accounts[1])
        console.log("Account Farmer accounts[1]=",accounts[1]," balance=", balance.toNumber())
        distributerBalance = await web3.eth.getBalance(accounts[2])
        console.log("Account Distributor accounts[2]=",accounts[2]," distributerBalance=", distributerBalance.toNumber())
        balance = await web3.eth.getBalance(accounts[3])
        console.log("Account Retailer accounts[3]=",accounts[3]," balance=", balance.toNumber())
        balance = await web3.eth.getBalance(accounts[4])
        console.log("Account Consumer accounts[4]=",accounts[4]," balance=", balance.toNumber())
        await supplyChain.buyItem(upc, {from: accounts[2], value: 100})
        console.log("productPrice=", productPrice)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
       
        // Verify the result set
         itemState = itemState + 1
         console.log("resultBufferTwo[4].toNumber()=", resultBufferTwo[4].toNumber())
         assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
         assert.equal(resultBufferTwo[1].toNumber(), upc, 'Error: Invalid item UPC')
         assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Missing or Invalid productID')
         assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
         assert.equal(resultBufferTwo[4].toNumber(), productPrice, 'Error: Missing or Invalid product price')
         assert.equal(resultBufferTwo[5].toNumber(), itemState, 'Error: Missing or Invalid itemState')
         assert.notEqual(resultBufferTwo[6], accounts[2], 'Error: Invalid distributionID')
         assert.notEqual(resultBufferTwo[7], accounts[3], 'Error: Invalid retailID')
         assert.notEqual(resultBufferTwo[8], accounts[4], 'Error: Invalid consumerID')
         assert.equal(eventEmitted, true, 'Invalid event emitted')                 
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false

        
        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })             

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipItem(upc)     

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set
        itemState = itemState + 1
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1].toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4].toNumber(), productPrice, 'Error: Missing or Invalid product price')
        assert.equal(resultBufferTwo[5].toNumber(), itemState, 'Error: Missing or Invalid itemState')
        assert.notEqual(resultBufferTwo[6], accounts[2], 'Error: Invalid distributionID')
        assert.notEqual(resultBufferTwo[7], accounts[3], 'Error: Invalid retailID')
        assert.notEqual(resultBufferTwo[8], accounts[4], 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')         
             
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        
        // Watch the emitted event Received()
        var event = supplyChain.Received()
        await event.watch((err, res) => {
            eventEmitted = true
        })             
       

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItem(upc)     
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1].toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4].toNumber(), productPrice, 'Error: Missing or Invalid product price')
        assert.equal(resultBufferTwo[5].toNumber(), itemState, 'Error: Missing or Invalid itemState')
        assert.notEqual(resultBufferTwo[6], accounts[2], 'Error: Invalid distributionID')
        assert.notEqual(resultBufferTwo[7], accounts[3], 'Error: Invalid retailID')
        assert.notEqual(resultBufferTwo[8], accounts[4], 'Error: Invalid consumerID')
        
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false

        
        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased()
        await event.watch((err, res) => {
            eventEmitted = true
        })      

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.purchaseItem(upc)     
    

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)    

        // Verify the result set
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1].toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4].toNumber(), productPrice, 'Error: Missing or Invalid product price')
        assert.equal(resultBufferTwo[5].toNumber(), itemState, 'Error: Missing or Invalid itemState')
        assert.notEqual(resultBufferTwo[6], accounts[2], 'Error: Invalid distributionID')
        assert.notEqual(resultBufferTwo[7], accounts[3], 'Error: Invalid retailID')
        assert.notEqual(resultBufferTwo[8], accounts[4], 'Error: Invalid consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')         
       
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)    
    
        
        // Verify the result set:
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
       // assert.equal(resultBufferOne[5], 0, 'Error: Invalid item State')
       
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)    

        
        // Verify the result set:
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1].toNumber(), upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.notEqual(resultBufferTwo[4].toNumber(), productPrice, 'Error: Missing or Invalid product price')
        assert.equal(resultBufferTwo[5].toNumber(), itemState, 'Error: Missing or Invalid itemState')
        assert.notEqual(resultBufferTwo[6], accounts[2], 'Error: Invalid distributionID')
        assert.notEqual(resultBufferTwo[7], accounts[3], 'Error: Invalid retailID')
        assert.notEqual(resultBufferTwo[8], accounts[4], 'Error: Invalid consumerID')
       
    })

});

